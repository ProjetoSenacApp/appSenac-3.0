{"version":3,"sources":["webpack:///src/app/msg/view/view-routing.module.ts","webpack:///src/app/msg/view/view.page.ts","webpack:///src/app/services/app.service.ts","webpack:///src/app/msg/view/view.page.scss","webpack:///src/app/msg/view/view.page.html","webpack:///src/app/msg/view/view.module.ts"],"names":["routes","path","component","ViewPageRoutingModule","imports","forChild","exports","ViewPage","router","app","storage","route","fbStore","params","subscribe","atributes","msgParams","isProfile","then","data","get","type","uData","userData","JSON","parse","pData","userProfile","getMessage","navigate","collection","uid","msgBox","doc","msgId","valueChanges","mData","viewMsg","message","replace","otherUSerID","from","to","interlocutor","name","status","update","selector","template","AppService","alertController","title","text","create","header","buttons","handler","alert","present","Promise","resolve","reject","next","error","console","userId","cssClass","role","log","providedIn","ViewPageModule","declarations"],"mappings":"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","file":"msg-view-view-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ViewPage } from './view.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ViewPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ViewPageRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n// 10.1) Importa dependências\r\nimport { Router } from '@angular/router';\r\nimport { StorageMap } from '@ngx-pwa/local-storage';\r\nimport { AppService } from 'src/app/services/app.service';\r\n\r\n// 12.1) Importa dependências\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\n\r\n@Component({\r\n  selector: 'app-view',\r\n  templateUrl: './view.page.html',\r\n  styleUrls: ['./view.page.scss'],\r\n})\r\nexport class ViewPage implements OnInit {\r\n\r\n  // 10.3) Armazena dados do usuário\r\n  userData: any;\r\n  userProfile: any;\r\n\r\n  // 12.3) Variáveis com parâmetros da rota e mensagem\r\n  msgParams: any;\r\n  viewMsg: any;\r\n  otherUSerID: any;\r\n\r\n  constructor(\r\n\r\n    // 10.2) Injeta dependências\r\n    public router: Router,\r\n    public app: AppService,\r\n    public storage: StorageMap,\r\n\r\n    // 12.2) Injeta dependências\r\n    private route: ActivatedRoute,\r\n    public fbStore: AngularFirestore,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    // 12.4) Obtém nome da caixa (inbox / outbox) e Id da mensagem\r\n    this.route.params.subscribe(atributes => {\r\n      this.msgParams = atributes;\r\n    });\r\n  }\r\n\r\n  // 10.4) Se tem perfil, obtém dados.\r\n  //       Se não tem, vai para \"novo perfil\"\r\n  ionViewWillEnter() {\r\n\r\n    // Testa o perfil local (true e false)\r\n    this.app.isProfile().then(\r\n      (data) => {\r\n\r\n        // Se existe, faz as ações da página\r\n        if (data) {\r\n\r\n          // Obtém dados do login local e armazena em 'userData'\r\n          this.storage.get('userData', { type: 'string' }).subscribe(\r\n            (uData) => {\r\n              this.userData = JSON.parse(uData);\r\n\r\n              // Obtém dados do perfil local e armazena em 'userProfile'\r\n              this.storage.get('userProfile', { type: 'string' }).subscribe(\r\n                (pData) => {\r\n                  this.userProfile = JSON.parse(pData);\r\n\r\n                  // 12.5) Obtém a mensagem única\r\n                  this.getMessage();\r\n                }\r\n              );\r\n            }\r\n          );\r\n\r\n          // Se não existe perfil, vai para o cadastro de perfil\r\n        } else {\r\n          this.router.navigate(['/user/new']);\r\n        }\r\n      });\r\n  }\r\n\r\n  // 12.6) Obtém a mensagem única\r\n  public getMessage() {\r\n\r\n    // Consulta o banco de dados\r\n    this.fbStore.collection(\r\n      `messages/${this.userData.uid}/${this.msgParams.msgBox}`\r\n    ).doc(this.msgParams.msgId).valueChanges().subscribe(\r\n      (mData) => {\r\n        this.viewMsg = mData;\r\n\r\n        // 13.1) Melhora visualização da mensagem\r\n        this.viewMsg.message = this.viewMsg.message.replace(/\\\\r\\\\n/g, '<br />');\r\n\r\n        // Obtém uid do interlocutor.\r\n        if (this.msgParams.msgBox === 'inbox') {\r\n          this.otherUSerID = this.viewMsg.from;\r\n        } else {\r\n          this.otherUSerID = this.viewMsg.to;\r\n        }\r\n\r\n        // Obtém o nome do interlocutor da mensagem\r\n        this.fbStore.doc<any>(`users/${this.otherUSerID}`).valueChanges().subscribe(\r\n          (data) => {\r\n\r\n            // 13.2) Formata remetente da mensagem\r\n            if (this.msgParams.msgBox === 'inbox') {\r\n              this.viewMsg.interlocutor = `De: <a href=\"${this.viewMsg.from}\">${data.name}</a>`;\r\n            } else {\r\n              this.viewMsg.interlocutor = `Para: <a href=\"${this.viewMsg.to}\">${data.name}</a>`;\r\n            }\r\n          }\r\n        );\r\n\r\n        // 18.1) Atualiza status da mensagem para \"Lida\"\r\n        if (this.msgParams.msgBox === 'inbox' && this.viewMsg.status === 'Não lida') {\r\n          this.fbStore.collection(`messages/${this.userData.uid}/${this.msgParams.msgBox}`)\r\n            .doc(this.msgParams.msgId).update({ status: 'Lida' });\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n","/**\r\n * Serviços de uso geral\r\n *    Aqui estão alguns serviços usados em toda ou parte do aplicativo\r\n * @author Por Luferat\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n// 3.1) Importa dependências\r\nimport { Router } from '@angular/router'; // Roteamento\r\nimport { AlertController } from '@ionic/angular'; // Caixa de alerta\r\n\r\n// 4.1) Importa dependências\r\nimport { StorageMap } from '@ngx-pwa/local-storage'; // Armazenamento local\r\n\r\n// 13.1) Importa dependências\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppService {\r\n\r\n  constructor(\r\n\r\n    // 3.2) Injeção das dependências\r\n    public router: Router, // Roteamento\r\n    public alertController: AlertController, // Caixa de alerta\r\n\r\n    // 4.2) Injeção das dependências\r\n    private storage: StorageMap, // Armazenamento local\r\n\r\n    // 13.2) Injeção das dependências\r\n    public fbStore: AngularFirestore,\r\n  ) { }\r\n\r\n  // 3.3) Caixa de alerta para feedback (https://ionicframework.com/docs/api/alert)\r\n  async myAlert(title: string, text: string) {\r\n    const alert = await this.alertController.create({\r\n      header: title,\r\n      message: text,\r\n      buttons: [{\r\n        text: 'Ok',\r\n        handler: () => true\r\n      }]\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n  // 4.3) Método que detecta a presença do perfil local\r\n  async isProfile() {\r\n\r\n    // Constrói a promise\r\n    return new Promise<any>((resolve, reject) => {\r\n\r\n      // Lê o armazenamento local\r\n      this.storage.get('userProfile', { type: 'string' }).subscribe({\r\n        next: (data) => {\r\n\r\n          // Se perfil, retorna 'true'\r\n          if (data) { resolve(true); }\r\n\r\n          // Se não tem perfil, retorna 'false'\r\n          else { resolve(false); }\r\n        },\r\n\r\n        // Em caso de erro ao tentar acessar 'storage'\r\n        error: (error) => console.error(error)\r\n      });\r\n    });\r\n  }\r\n\r\n  // 13.3) Apaga uma mensagem da caixa de mensagens\r\n  async msgDelete(userId: string, msgBox: string, msgId: string) {\r\n\r\n    // 14.1) Exibe a caixa de alerta e de confirmação\r\n    const alert = await this.alertController.create({\r\n      cssClass: '',\r\n      header: 'Apagar mensagem',\r\n      message: 'Tem certeza que deseja apagar esta mensagem? Este processo é irreversível!',\r\n      buttons: [\r\n        {\r\n          text: 'Cancelar',\r\n          role: 'cancel',\r\n          cssClass: 'secondary',\r\n          handler: () => false\r\n        }, {\r\n          text: 'Apagar',\r\n          handler: () => {\r\n\r\n            // Localize a caixa correta e apaga a mensagem\r\n            this.fbStore.collection(`messages/${userId}/${msgBox}`).doc(msgId).update({ status: 'Apagada' })\r\n\r\n              // Se a mensagem foi apagada, retorna para a listagem da caixa\r\n              .then(() => { this.router.navigate([`/msg/${msgBox}`]); })\r\n\r\n              // Se deu erro, exibe\r\n              .catch(error => { console.log(error); });\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    await alert.present();\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21zZy92aWV3L3ZpZXcucGFnZS5zY3NzIn0= */\";","export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n\\r\\n    <!-- 10.1) Menu e título -->\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button></ion-menu-button>\\r\\n    </ion-buttons>\\r\\n\\r\\n    <ion-title>Ler mensagem</ion-title>\\r\\n\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n\\r\\n  <div class=\\\"ion-padding\\\">\\r\\n\\r\\n    <div *ngIf=\\\"viewMsg\\\">\\r\\n\\r\\n      <small [innerHTML]=\\\"viewMsg.interlocutor\\\"></small><br>\\r\\n      <small>Em: {{ viewMsg.date | date: ['dd/MM/yyyy'] }} às {{ viewMsg.date | date: ['HH:mm'] }}.</small>\\r\\n      <hr>\\r\\n      <h4>{{ viewMsg.subject }}</h4>\\r\\n      <!-- 14.1) Adiciona separador -->\\r\\n      <hr>\\r\\n      <!-- 13.1) Exibe mensagem -->\\r\\n      <div>{{ viewMsg.message }}</div>\\r\\n      <hr>\\r\\n\\r\\n      <ion-grid>\\r\\n        <ion-row>\\r\\n          <ion-col class=\\\"ion-text-left ion-no-padding\\\">\\r\\n            <!-- 14.2) Botão [Responder] -->\\r\\n            <!-- 15.1) Link no botão [Responder] -->\\r\\n            <ion-button routerLink=\\\"/msg/reply/inbox/{{ msgParams.msgId }}\\\">\\r\\n              <ion-icon name=\\\"send-outline\\\"></ion-icon>&nbsp;Responder\\r\\n            </ion-button>\\r\\n          </ion-col>\\r\\n\\r\\n          <!-- 13.2) Botão apagar mensagem -->\\r\\n          <!-- 14.3) Botão [Apagar] -->\\r\\n          <ion-col class=\\\"ion-text-right ion-no-padding\\\">\\r\\n            <ion-button (click)=\\\"app.msgDelete(userData.uid, msgParams.msgBox, msgParams.msgId)\\\">\\r\\n              <ion-icon name=\\\"trash-outline\\\"></ion-icon>&nbsp;Apagar\\r\\n            </ion-button>\\r\\n          </ion-col>\\r\\n\\r\\n        </ion-row>\\r\\n      </ion-grid>\\r\\n      <!-- 18.1) Desabilita linha (comentar) -->\\r\\n      <!-- <hr> -->\\r\\n\\r\\n      <!-- 14.4) Botão [Caixa...] -->\\r\\n      <!-- 18.2) Desabilita botão (comentar) -->\\r\\n      <!-- <ion-button *ngIf=\\\"msgParams.msgBox == 'inbox'\\\" expand=\\\"block\\\" routerLink=\\\"/msg/inbox\\\">\\r\\n        <ion-icon name=\\\"list-outline\\\"></ion-icon>&nbsp;Caixa de entrada\\r\\n      </ion-button>\\r\\n      <ion-button *ngIf=\\\"msgParams.msgBox == 'outbox'\\\" expand=\\\"block\\\" routerLink=\\\"/msg/outbox\\\">\\r\\n        <ion-icon name=\\\"list-outline\\\"></ion-icon>&nbsp;Caixa de saída\\r\\n      </ion-button> -->\\r\\n\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n\\r\\n</ion-content>\\r\\n\\r\\n<!-- 17.1) Menu de mensagens -->\\r\\n<app-msg-menu></app-msg-menu>\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { ViewPageRoutingModule } from './view-routing.module';\r\nimport { ViewPage } from './view.page';\r\n\r\n// 17)\r\nimport { MsgMenuComponent } from 'src/app/components/msg-menu/msg-menu.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ViewPageRoutingModule\r\n  ],\r\n  declarations: [\r\n    ViewPage,\r\n\r\n    // 17)\r\n    MsgMenuComponent,\r\n  ]\r\n})\r\nexport class ViewPageModule { }\r\n"]}