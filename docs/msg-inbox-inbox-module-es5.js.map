{"version":3,"sources":["webpack:///src/app/msg/inbox/inbox.module.ts","webpack:///src/app/msg/inbox/inbox.page.scss","webpack:///src/app/msg/inbox/inbox-routing.module.ts","webpack:///src/app/msg/inbox/inbox.page.ts","webpack:///src/app/msg/inbox/inbox.page.html","webpack:///src/app/services/app.service.ts"],"names":["InboxPageModule","imports","declarations","routes","path","component","InboxPageRoutingModule","forChild","exports","InboxPage","router","app","storage","fbStore","isProfile","then","data","get","type","subscribe","uData","userData","JSON","parse","pData","userProfile","getAllMessages","navigate","collection","uid","ref","orderBy","valueChanges","idField","mData","allMessages","forEach","msgData","status","doc","from","fromName","name","statusIcon","push","selector","template","AppService","alertController","title","text","create","header","message","buttons","handler","alert","present","Promise","resolve","reject","next","error","console","userId","msgBox","msgId","cssClass","role","update","log","providedIn"],"mappings":"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","file":"msg-inbox-inbox-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { InboxPageRoutingModule } from './inbox-routing.module';\r\n\r\nimport { InboxPage } from './inbox.page';\r\n\r\n// 17.1) Importa dependências\r\nimport { MsgMenuComponent } from '../../components/msg-menu/msg-menu.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    InboxPageRoutingModule\r\n  ],\r\n  declarations: [\r\n    InboxPage,\r\n\r\n    // 17.2) Declara dependências\r\n    MsgMenuComponent,\r\n  ]\r\n})\r\nexport class InboxPageModule {}\r\n","export default \"/* 14.1) Formata o grid das mesagens */\\nion-grid {\\n  margin-top: 1rem;\\n}\\nion-row ion-col:first-child {\\n  text-align: center;\\n  background: #eee;\\n  color: #333;\\n  padding: 0.2rem;\\n}\\n/* 18.1) Estiliza mensagens lidas de forma diferente */\\nion-row ion-col.readed:first-child {\\n  background: #888;\\n}\\nion-grid small {\\n  display: block;\\n  margin-top: 0.2rem;\\n}\\nion-row {\\n  margin: 1rem 0;\\n}\\nion-col div {\\n  margin-bottom: 0.5rem;\\n  font-weight: bold;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbXNnL2luYm94L2luYm94LnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBQTtBQUNBO0VBQ0ksZ0JBQUE7QUFDSjtBQUVBO0VBQ0ksa0JBQUE7RUFDQSxnQkFBQTtFQUNBLFdBQUE7RUFDQSxlQUFBO0FBQ0o7QUFFQSxzREFBQTtBQUNBO0VBQ0ksZ0JBQUE7QUFDSjtBQUVBO0VBQ0ksY0FBQTtFQUNBLGtCQUFBO0FBQ0o7QUFFQTtFQUNJLGNBQUE7QUFDSjtBQUVBO0VBQ0kscUJBQUE7RUFDQSxpQkFBQTtBQUNKIiwiZmlsZSI6InNyYy9hcHAvbXNnL2luYm94L2luYm94LnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIDE0LjEpIEZvcm1hdGEgbyBncmlkIGRhcyBtZXNhZ2VucyAqL1xyXG5pb24tZ3JpZCB7XHJcbiAgICBtYXJnaW4tdG9wOiAxcmVtO1xyXG59XHJcblxyXG5pb24tcm93IGlvbi1jb2w6Zmlyc3QtY2hpbGQge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgYmFja2dyb3VuZDogI2VlZTtcclxuICAgIGNvbG9yICAgICA6ICMzMzM7XHJcbiAgICBwYWRkaW5nICAgOiAuMlxccmVtO1xyXG59XHJcblxyXG4vKiAxOC4xKSBFc3RpbGl6YSBtZW5zYWdlbnMgbGlkYXMgZGUgZm9ybWEgZGlmZXJlbnRlICovXHJcbmlvbi1yb3cgaW9uLWNvbC5yZWFkZWQ6Zmlyc3QtY2hpbGQge1xyXG4gICAgYmFja2dyb3VuZDogIzg4ODtcclxufVxyXG5cclxuaW9uLWdyaWQgc21hbGwge1xyXG4gICAgZGlzcGxheSAgIDogYmxvY2s7XHJcbiAgICBtYXJnaW4tdG9wOiAuMnJlbTtcclxufVxyXG5cclxuaW9uLXJvdyB7XHJcbiAgICBtYXJnaW46IDFyZW0gMDtcclxufVxyXG5cclxuaW9uLWNvbCBkaXYge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogLjVyZW07XHJcbiAgICBmb250LXdlaWdodCAgOiBib2xkO1xyXG59Il19 */\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { InboxPage } from './inbox.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: InboxPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class InboxPageRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n// 10.1) Importa dependências\r\nimport { Router } from '@angular/router';\r\nimport { StorageMap } from '@ngx-pwa/local-storage';\r\nimport { AppService } from 'src/app/services/app.service';\r\n\r\n// 11.1) Importa as dependências\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\n\r\n@Component({\r\n  selector: 'app-inbox',\r\n  templateUrl: './inbox.page.html',\r\n  styleUrls: ['./inbox.page.scss'],\r\n})\r\nexport class InboxPage implements OnInit {\r\n\r\n  // 10.3) Armazena dados do usuário\r\n  userData: any;\r\n  userProfile: any;\r\n\r\n  // 11.3) Variável com todas as mensagens para a 'view'\r\n  public allMessages: any[any];\r\n\r\n  constructor(\r\n\r\n    // 10.2) Injeta dependências\r\n    public router: Router,\r\n    public app: AppService,\r\n    public storage: StorageMap,\r\n\r\n    // 11.2) Injeta dependências\r\n    public fbStore: AngularFirestore,\r\n\r\n  ) { }\r\n\r\n  ngOnInit() { }\r\n\r\n  // 10.4) Se tem perfil, obtém dados.\r\n  //       Se não tem, vai para \"novo perfil\"\r\n  ionViewWillEnter() {\r\n\r\n    // Testa o perfil local (true e false)\r\n    this.app.isProfile().then(\r\n      (data) => {\r\n\r\n        // Se existe, faz as ações da página\r\n        if (data) {\r\n\r\n          // Obtém dados do login local e armazena em 'userData'\r\n          this.storage.get('userData', { type: 'string' }).subscribe(\r\n            (uData) => {\r\n              this.userData = JSON.parse(uData);\r\n\r\n              // Obtém dados do perfil local e armazena em 'userProfile'\r\n              this.storage.get('userProfile', { type: 'string' }).subscribe(\r\n                (pData) => {\r\n                  this.userProfile = JSON.parse(pData);\r\n\r\n                  // 11.4) Obtém todas as mensagens para a 'view'\r\n                  this.getAllMessages();\r\n                }\r\n              );\r\n            }\r\n          );\r\n\r\n          // Se não existe perfil, vai para o cadastro de perfil\r\n        } else {\r\n          this.router.navigate(['/user/new']);\r\n        }\r\n      });\r\n  }\r\n\r\n  // 11.5) Obtém todas as mensagens para a 'view'\r\n  getAllMessages() {\r\n\r\n    // Lê mesangens do banco de dados com base no Id do usuário logado\r\n    this.fbStore.collection(\r\n      `messages/${this.userData.uid}/inbox`,\r\n      ref => ref.orderBy('date', 'desc')\r\n    ).valueChanges({ idField: 'msgId' }).subscribe(\r\n      (mData) => {\r\n\r\n        // Variável local para as mensagens\r\n        const allMessages = [];\r\n\r\n        // Obtém cada mensagem recebida\r\n        mData.forEach(\r\n          (msgData: any) => {\r\n\r\n            // 13.1) Não exibe mensagens apagadas\r\n            if (msgData.status !== 'Apagada') {\r\n\r\n              // Obtém o nome de que enviou a mensagem\r\n              this.fbStore.doc<any>(`users/${msgData.from}`).valueChanges().subscribe(\r\n                (data) => {\r\n                  msgData.fromName = data.name;\r\n\r\n                  // 14) Seleciona ícone conforme status da mensagem\r\n                  switch (msgData.status) {\r\n                    case 'Não lida':\r\n                      msgData.statusIcon = 'mail-outline';\r\n                      break;\r\n                    case 'Lida':\r\n                      msgData.statusIcon = 'mail-open-outline';\r\n                      break;\r\n                    case 'Respondida':\r\n                      msgData.statusIcon = 'send-outline';\r\n                      break;\r\n                  }\r\n\r\n                  // Lista mensagem em \"todas as mensagens\"\r\n                  allMessages.push(msgData);\r\n                }\r\n              );\r\n            }\r\n          }\r\n        );\r\n\r\n        // Envia mensagens para a view\r\n        this.allMessages = allMessages;\r\n      });\r\n  }\r\n}\r\n","export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n\\r\\n    <!-- 10.1) Menu e título -->\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button></ion-menu-button>\\r\\n    </ion-buttons>\\r\\n\\r\\n    <ion-title>Caixa de Entrada</ion-title>\\r\\n\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n\\r\\n  <!-- 14.1) Lista mensagens recebidas -->\\r\\n  <div class=\\\"ion-padding\\\">\\r\\n\\r\\n    <p>Mensagens recebidas:</p>\\r\\n\\r\\n    <ion-grid class=\\\"allMessages\\\" *ngIf=\\\"allMessages?.length > 0\\\">\\r\\n\\r\\n      <ion-row *ngFor=\\\"let msg of allMessages\\\">\\r\\n\\r\\n        <!-- 18.2) Estiliza mensagens lidas de forma diferente -->\\r\\n        <ion-col size=\\\"1\\\" title=\\\"{{ msg.status }}\\\" [ngClass]=\\\"{'readed' : msg.status !== 'Não lida'}\\\">\\r\\n          <ion-icon name=\\\"{{msg.statusIcon}}\\\"></ion-icon>\\r\\n        </ion-col>\\r\\n        <ion-col>\\r\\n          <div><a routerLink=\\\"/msg/view/inbox/{{ msg.msgId }}\\\">{{ msg.subject }}</a></div>\\r\\n          <small>De <strong>{{ msg.fromName }}</strong></small>\\r\\n          <small>\\r\\n            Em <strong>{{ msg.date | date: ['dd/MM/yyyy, HH:mm'] }}.</strong>\\r\\n            &nbsp;|&nbsp; {{ msg.status }}\\r\\n          </small>\\r\\n        </ion-col>\\r\\n\\r\\n      </ion-row>\\r\\n\\r\\n    </ion-grid>\\r\\n\\r\\n    <!-- 18.1) Se não exitem mensagens à exibir -->\\r\\n    <p class=\\\"ion-text-center\\\" *ngIf=\\\"allMessages?.length == 0\\\">Nenhuma mensagem...</p>\\r\\n\\r\\n  </div>\\r\\n\\r\\n</ion-content>\\r\\n\\r\\n<!-- 17.1) Menu de mensagens -->\\r\\n<app-msg-menu></app-msg-menu>\";","/**\r\n * Serviços de uso geral\r\n *    Aqui estão alguns serviços usados em toda ou parte do aplicativo\r\n * @author Por Luferat\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n// 3.1) Importa dependências\r\nimport { Router } from '@angular/router'; // Roteamento\r\nimport { AlertController } from '@ionic/angular'; // Caixa de alerta\r\n\r\n// 4.1) Importa dependências\r\nimport { StorageMap } from '@ngx-pwa/local-storage'; // Armazenamento local\r\n\r\n// 13.1) Importa dependências\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppService {\r\n\r\n  constructor(\r\n\r\n    // 3.2) Injeção das dependências\r\n    public router: Router, // Roteamento\r\n    public alertController: AlertController, // Caixa de alerta\r\n\r\n    // 4.2) Injeção das dependências\r\n    private storage: StorageMap, // Armazenamento local\r\n\r\n    // 13.2) Injeção das dependências\r\n    public fbStore: AngularFirestore,\r\n  ) { }\r\n\r\n  // 3.3) Caixa de alerta para feedback (https://ionicframework.com/docs/api/alert)\r\n  async myAlert(title: string, text: string) {\r\n    const alert = await this.alertController.create({\r\n      header: title,\r\n      message: text,\r\n      buttons: [{\r\n        text: 'Ok',\r\n        handler: () => true\r\n      }]\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n  // 4.3) Método que detecta a presença do perfil local\r\n  async isProfile() {\r\n\r\n    // Constrói a promise\r\n    return new Promise<any>((resolve, reject) => {\r\n\r\n      // Lê o armazenamento local\r\n      this.storage.get('userProfile', { type: 'string' }).subscribe({\r\n        next: (data) => {\r\n\r\n          // Se perfil, retorna 'true'\r\n          if (data) { resolve(true); }\r\n\r\n          // Se não tem perfil, retorna 'false'\r\n          else { resolve(false); }\r\n        },\r\n\r\n        // Em caso de erro ao tentar acessar 'storage'\r\n        error: (error) => console.error(error)\r\n      });\r\n    });\r\n  }\r\n\r\n  // 13.3) Apaga uma mensagem da caixa de mensagens\r\n  async msgDelete(userId: string, msgBox: string, msgId: string) {\r\n\r\n    // 14.1) Exibe a caixa de alerta e de confirmação\r\n    const alert = await this.alertController.create({\r\n      cssClass: '',\r\n      header: 'Apagar mensagem',\r\n      message: 'Tem certeza que deseja apagar esta mensagem? Este processo é irreversível!',\r\n      buttons: [\r\n        {\r\n          text: 'Cancelar',\r\n          role: 'cancel',\r\n          cssClass: 'secondary',\r\n          handler: () => false\r\n        }, {\r\n          text: 'Apagar',\r\n          handler: () => {\r\n\r\n            // Localize a caixa correta e apaga a mensagem\r\n            this.fbStore.collection(`messages/${userId}/${msgBox}`).doc(msgId).update({ status: 'Apagada' })\r\n\r\n              // Se a mensagem foi apagada, retorna para a listagem da caixa\r\n              .then(() => { this.router.navigate([`/msg/${msgBox}`]); })\r\n\r\n              // Se deu erro, exibe\r\n              .catch(error => { console.log(error); });\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    await alert.present();\r\n  }\r\n}\r\n"]}